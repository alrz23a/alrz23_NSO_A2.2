---
- name: Configuring HAproxy loadbalancer
  hosts: HAproxy
  become: true
  tasks:

    - name : sudo wait
      become: true
      shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Installing HAproxy
      apt:
        name: haproxy
        state: present
        update_cache: true
      
    - name: Installing keepalived
      apt:
        name: keepalived
        state: present
        update_cache: true

    - name: sudo sysctl -w net.ipv4.ip_nonlocal_bind=1
      become: true
      shell: sysctl -w net.ipv4.ip_nonlocal_bind=1

    - name: gather server ip addresses
      setup:
            filter: ansible_default_ipv4.address     
         
    
    - name: copy files haproxy.cfg
      template:
        src: haproxy.cfg.j2
        dest: "/etc/haproxy/haproxy.cfg"
      notify:
        - restart haproxy

    - name: install nginx, snmpd, snmp-mibs-downloader
      apt: 
        update_cache: true
        name: [ 'nginx', 'snmpd','snmp', 'snmp-mibs-downloader' ] 
        state: latest

    - name: copy nginx config files
      template:
         src: nginx.conf.j2
         dest: "/etc/nginx/nginx.conf"
    
    - name: Copy uipassword template to target
      template:
        src: uipassword_template.j2  # Path to your template file
        dest: /etc/haproxy/uipassword

    - name: Read 'uipassword' file
      shell: cat /etc/haproxy/uipassword
      register: password_file_content

    - name: Set username and password from 'uipassword' file
      set_fact:
        haproxy_username: "{{ password_file_content.stdout_lines[0].split(':')[0] }}"
        haproxy_password: "{{ password_file_content.stdout_lines[0].split(':')[1] }}"

    - name: Restart haproxy
      service:
        name: haproxy
        state: restarted

    - name: Restart nginx
      service:
        name: nginx
        state: restarted

    - name: Allow ports 80, 8011 for HTTP and 1611 for UDP
      firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: true
      with_items:
        - 80/tcp
        - 8011/tcp
        - 1611/udp

- name: Setup Flask App and SNMP Daemon
  hosts: webservers
  become: true
  tasks:
    - name: Install Flask and Gunicorn
      pip:
        name:
          - flask
          - gunicorn

    - name: install flask
      pip:
        executable: pip3
        name: flask
        state: latest

    - name: install gunicorn
      pip:
        executable: pip3
        name: gunicorn
        state: latest
    - name: createnew directory
      file:
              path: "/home/flask-app/"
              state: directory

    - name: copy app.py to devservers
      template:
        src: "application2.py"
        dest: "/home/flask-app/app.py"


    - name: start flask app
      shell: |
        cd /home/flask-app/
        gunicorn --bind 0.0.0.0:5000 app:app&  

    - name: install snmpd
      apt:
              name: snmpd
              state: latest
    
    - name: cpy snmpd conf file
      template:
              src: snmpd.conf.j2
              dest: "/etc/snmp/snmpd.conf"
    - name: run snmpd
      service:
              name: snmpd
              state: restarted    
              
