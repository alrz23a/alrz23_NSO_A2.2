---

- hosts: all
  gather_facts: true
  become: true
    
  tasks:
    - name: apt update
      apt:
        update_cache: true

- name: Configuring HAproxy loadbalancer
  hosts: main_proxy, standby_proxy
  become: true
  tasks:
    - name: Wait for any dpkg/apt locks to be released
      shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Install necessary packages
      apt:
        name: 
          - haproxy
          - keepalived
          - nginx
          - snmpd
          - snmp
          - snmp-mibs-downloader
        state: latest
        update_cache: yes

    - name: Enable non-local IP binding
      sysctl:
        name: net.ipv4.ip_nonlocal_bind
        value: 1
        state: present
        sysctl_set: yes

    - name: Gather server IP addresses
      setup:
        filter: ansible_default_ipv4.address

    - name: Copy configuration files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: 'haproxy.cfg.j2', dest: '/etc/haproxy/haproxy.cfg' }
        - { src: 'nginx.conf.j2', dest: '/etc/nginx/nginx.conf' }
        - { src: 'snmpd.conf.j2', dest: '/etc/snmp/snmpd.conf' }
      notify:
        - restart services
    
    - name: set permissions for web root
      file:
        path: /var/www/html
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
        recurse: yes

  handlers:
    - name: restart services
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - haproxy
        - keepalived
        - nginx
        - snmpd

- name: Configure Keepalived
  hosts: main_proxy, standby_proxy
  become: true
  tasks:
    - name: Set virtual IPs
      set_fact:
        virtual_ips: "{{ lookup('file', './vip_address') | regex_findall('([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)') }}"

    - name: Set node state and priority
      set_fact:
        node_state: "{{ 'MASTER' if inventory_hostname == groups['main_proxy'][0] else 'BACKUP' }}"
        node_priority: "{{ 101 if inventory_hostname == groups['main_proxy'][0] else 100 }}"

    - name: Configure keepalived
      template:
        src: keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
      vars:
        virtual_ip: "{{ virtual_ips[0] }}"
        node_state: "{{ node_state }}"
        node_priority: "{{ node_priority }}"
      notify:
        - restart keepalived

  handlers:
    - name: restart keepalived
      service:
        name: keepalived
        state: restarted

- hosts: devservers
  become: true
  tasks:
    - name: Update apt cache and install dependencies
      apt:
        update_cache: yes
        name: 
          - python3
          - python3-pip
          - snmpd
        state: present

    - name: Install Python packages
      pip:
        name: 
          - flask
          - ping3
          - gunicorn
        executable: pip3

    - name: Create application directory
      file:
        path: /home/flask-app
        state: directory

    - name: Copy Flask application scripts
      copy:
        src: "{{ item }}"
        dest: /home/flask-app/
      loop:
        - application2.py
        - assignment2.py
        - service.py
        - alive.py
        
    - name: Start Flask applications
      shell: |
        cd /home/flask-app
        nohup gunicorn --bind 0.0.0.0:5000 application2:app &
        nohup gunicorn --bind 0.0.0.0:5001 assignment2:app &
        nohup gunicorn --bind 0.0.0.0:5002 service:app &
        nohup gunicorn --bind 0.0.0.0:5003 alive:app &


- name: Install Grafana and prometheus on bastion
  hosts: bastion
  gather_facts: true
  become: true
  tasks:
    - name: Update apt repo and cache on all Ubuntu box
      apt:
        update_cache: true
        force_apt_get: true
        cache_valid_time: 3600

    - name: Upgrade all packages on servers
      apt:
        upgrade: dist
        force_apt_get: true

    - name: Install required packages
      apt:
        name:
          - gnupg2
          - curl
          - software-properties-common
          - snmp

    - name: Add the Grafana GPG key
      shell: |
        curl https://packages.grafana.com/gpg.key | sudo apt-key add -
        add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
      args:
        warn: no

    - name: Install the grafana package
      apt:
        name: grafana
        state: present
        update_cache: true
      notify:
        - Start grafana
        - Enable grafana

    - name: Ensure Nginx is installed
      apt:
        name: nginx
        state: present
      notify: Start and Enable Nginx

    - name: Create grafana nginx config file
      copy:
          dest: /etc/nginx/conf.d/grafana.conf
          mode: 0755
          content: |
            server {
              listen 80;
              server_tokens off;
              client_max_body_size 10M;
              server_name grafana1.citizix.com;

              ignore_invalid_headers off;

              if ($host !~* ^(grafana1.citizix.com)$ ) {
                  return 444;
              }

              location / {
                  send_timeout            600;
                  proxy_read_timeout      600;
                  proxy_send_timeout      600;
                  proxy_connect_timeout   600;
                  proxy_redirect          off;
                  proxy_set_header        Host $host;
                  proxy_set_header        X-Real-IP $remote_addr;
                  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header        X-Forwarded-Host $server_name;
                  proxy_set_header        X-Forwarded-Proto $scheme;
                  proxy_pass http://127.0.0.1:3000;
              }
            }
    - name: Install Prometheus
      apt:
        name: prometheus
        state: present
        update_cache: true

    - name: Start Prometheus service
      service:
        name: prometheus
        state: started
        enabled: true

  handlers:
    - name: Start grafana
      systemd:
        name: grafana-server
        state: started

    - name: Enable grafana
      systemd:
        name: grafana-server
        enabled: true

    - name: Start and Enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: true

- hosts: all
  become: True
  become_user: root
  vars:
    node_exporter_version: 1.1.2
  tasks:
    - name: download node exporter
      get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
        dest: /tmp
    - name: unarchive node exporter
      unarchive:
        remote_src: true
        src: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
        dest: /tmp
    - name: move node exporter to /usr/local/bin
      copy:
        src: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        remote_src: true
        owner: root
        group: root
        mode: 0755
    - name: install unit file to systemd
      template:
        src: node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: 0600
    - name: configure systemd to use service
      systemd:
        daemon_reload: true
        enabled: true
        state: started
        name: node_exporter.service

- name: Configure HAproxy for performance UI
  hosts: main_proxy standby_proxy
  become: true
  tasks:
    - name: Install firewalld
      package:
        name: firewalld
        state: present

    - name: Install required firewalld Python module
      package:
        name: python3-firewall
        state: present

    - name: Start and enable firewalld service
      service:
        name: firewalld
        state: started
        enabled: true

    - name: Copy uipassword template to target
      template:
        src: uipassword_template.j2  # Path to your template file
        dest: uipassword

    - name: Read 'uipassword' file
      shell: cat uipassword
      register: password_file_content

    - name: Set username and password from 'uipassword' file
      set_fact:
        haproxy_username: "{{ password_file_content.stdout_lines[0].split(':')[0] }}"
        haproxy_password: "{{ password_file_content.stdout_lines[0].split(':')[1] }}"

    - name: Check if password has changed
      set_fact:
        password_changed: "{{ haproxy_password != current_password }}"
      vars:
        current_password: "{{ lookup('file', 'uipassword', errors='ignore') }}"
      changed_when: false

    - name: Edit HAproxy configuration
      blockinfile:
        path: /etc/haproxy/haproxy.cfg
        block: |
          listen stats
            bind :8011
            mode http
            stats enable
            stats uri /stats
            stats refresh 1s
            stats auth {{ haproxy_username }}:{{ haproxy_password }}
      when: password_changed or not current_password

    - name: Restart haproxy
      service:
        name: haproxy
        state: restarted
      become: true
      when: password_changed or not current_password

    - name: Allow port 8011
      firewalld:
        port: 8011/tcp
        permanent: true
        state: enabled
        immediate: true
      become: true
